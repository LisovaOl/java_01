// typeof - тит данных (string, Number, boolean, Nan, underfind)
let muName = '354';
console.log(typeof muName);

//  - - - - - - - - преобразование в число
let apples = '2';
let oranges = '3';

console.log(apples + oranges); // "23", так как бинарный плюс объединяет строки

console.log(Number(apples) + Number(oranges)); // 5//преобразование к числу.
console.log(+apples + +oranges); //преобразование к числу короткий метод

// let a = +prompt("Первое число?", 1);
// let b = +prompt("Второе число?", 2);

// console.log(a + b); //3

// -------- if..else тернарный оператор ------------------

// let accessAllowed;
// let age = prompt('Сколько вам лет?', '');

// if (age > 18) {
//   accessAllowed = true;
// } else {
//   accessAllowed = false;
// }

// alert(accessAllowed);

// Синтаксис:

// let result = условие ? значение1 : значение2;

// let accessAllowed = (age > 18) ? true : false;

// ---------------------------------------------------------

// -------    Несколько операторов „?“ ----------------

// Последовательность операторов вопросительного знака ? позволяет вернуть значение, которое зависит от более чем одного условия.

// Например:

// let age = prompt('Возраст?', 18);

// let message = (age < 3) ? 'Здравствуй, малыш!' :
//   (age < 18) ? 'Привет!' :
//   (age < 100) ? 'Здравствуйте!' :
//   'Какой необычный возраст!';

// alert( message );

// Поначалу может быть сложно понять, что происходит. Но при ближайшем рассмотрении мы видим, что это обычная последовательная проверка:

//     Первый знак вопроса проверяет age < 3.
//     Если верно – возвращает 'Здравствуй, малыш!'. В противном случае, проверяет выражение после двоеточия „:“, вычисляет age < 18.
//     Если это верно – возвращает 'Привет!'. В противном случае, проверяет выражение после следующего двоеточия „:“, вычисляет age < 100.
//     Если это верно – возвращает 'Здравствуйте!'. В противном случае, возвращает выражение после последнего двоеточия – 'Какой необычный возраст!'.

// Вот как это выглядит при использовании if..else:

// if (age < 3) {
//   message = 'Здравствуй, малыш!';
// } else if (age < 18) {
//   message = 'Привет!';
// } else if (age < 100) {
//   message = 'Здравствуйте!';
// } else {
//   message = 'Какой необычный возраст!';
// }

// ====== Task ======
// Используя конструкцию if..else, напишите код, который будет спрашивать: „Какое «официальное» название JavaScript?“

// Если пользователь вводит «ECMAScript», то показать: «Верно!», в противном случае – отобразить: «Не знаете? ECMAScript!»

// let nameJava = prompt('Какое «официальное» название JavaScript?');

// if (nameJava === 'ECMAScript') {
//     alert('«Верно');
// } else {
//     alert('Не знаете? ECMAScript!');
// };

//  = = = = = = = Синтаксис: Тернарный оператор

// = = = = = = = = let result = условие ? значение1 : значение2;

// let java = (nameJava === 'ECMAScript') ? alert('«Верно') : alert('Не знаете? ECMAScript!');

// ............ Task ............
// Покажите знак числа

// Используя конструкцию if..else, напишите код, который получает число через prompt, а затем выводит в alert:

//     1, если значение больше нуля,
//     -1, если значение меньше нуля,
//     0, если значение равно нулю.

// Предполагается, что пользователь вводит только числа.

// let numberUser = prompt('Введите число....');

// if (numberUser > 0) {
//     alert(1);
// } else if (numberUser < 0) {
//     alert(-1);
// } else {
//     alert(0);
// }

// ..........Task........
// Перепишите 'if' в '?'

// Перепишите конструкцию if с использованием условного оператора '?':

let result;

// if (a + b < 4) {
//   result = 'Мало';
// } else {
//   result = 'Много';
// }

let a = 2;
let b = 1;
console.log((result = a + b < 4) ? 'Мало' : 'Много');

// .........Task..........
// Перепишите 'if..else' в '?'

// Перепишите if..else с использованием нескольких операторов '?'.

// Для читаемости рекомендуется разбить код на несколько строк.

// let message;

// if (login == 'Сотрудник') {
//   message = 'Привет';
// } else if (login == 'Директор') {
//   message = 'Здравствуйте';
// } else if (login == '') {
//   message = 'Нет логина';
// } else {
//   message = '';
// }

// .......решениe.......
// let message =
//   login == 'Сотрудник'
//     ? 'Привет'
//     : login == 'Директор'
//     ? 'Здравствуйте'
//     : login == ''
//     ? 'Нет логина'
//     : '';

// ======== ИЛИ «||» находит первое истинное значение

// Другими словами, цепочка ИЛИ || возвращает первое истинное значение или последнее, если такое значение не найдено.

// alert( 1 || 0 ); // 1
// alert( true || 'no matter what' ); // true

// alert( null || 1 ); // 1 (первое истинное значение)
// alert( null || 0 || 1 ); // 1 (первое истинное значение)
// alert( undefined || null || 0 ); // 0 (поскольку все ложно, возвращается последнее значение)

// ............
// let currentUser = null;
// let defaultUser = "John";

// let name = currentUser || defaultUser || "unnamed";

// alert( name ); // выбирается "John" – первое истинное значение

// Если бы и currentUser, и defaultUser были ложными, в качестве результата мы бы наблюдали "unnamed".

// ======= && (И) И «&&» находит первое ложное значение

// Можно передать несколько значений подряд. В таком случае возвратится первое «ложное» значение, на котором остановились вычисления.

// alert( 1 && 2 && null && 3 ); // null

// Когда все значения верны, возвращается последнее

// alert( 1 && 2 && 3 ); // 3

// Приоритет оператора && больше, чем у ||

// Приоритет оператора И && больше, чем ИЛИ ||, так что он выполняется раньше.

// Таким образом, код a && b || c && d по существу такой же, как если бы выражения && были в круглых скобках: (a && b) || (c && d).

// ==========! (НЕ)

// Оператор НЕ представлен восклицательным знаком !.

// Синтаксис довольно прост:

// result = !value;

// Оператор принимает один аргумент и выполняет следующие действия:

//     Сначала приводит аргумент к логическому типу true/false.
//     Затем возвращает противоположное значение.

// Например:

// alert( !true ); // false
// alert( !0 ); // true

// Приоритет НЕ ! является наивысшим из всех логических операторов, поэтому он всегда выполняется первым, перед && или ||.

// ......... Task .....
// Напишите условие if для проверки, что переменная age находится в диапазоне между 14 и 90 включительно.

// «Включительно» означает, что значение переменной age может быть равно 14 или 90.

let age1 = 65;
if (age1 >= 14 && age1 <= 90) {
  console.log('14-90');
} else {
  console.log('Not');
}
// ......... Task .........

// Напишите условие if для проверки, что значение переменной age НЕ находится в диапазоне 14 и 90 включительно.

// Напишите два варианта: первый с использованием оператора НЕ !, второй – без этого оператора.

let age2 = 56;
// if (!(age2 >= 14 && age2 <= 90)) {
//   console.log('14-90');
// } else {
//   console.log('Not');
// }

if (age2 < 14 || age2 > 90) {
  console.log('true'); // если age меньше 14 ИЛИ больше 90 то true
} else {
  console.log('false'); // если с 14-90 то false
}
// ........... Task ........

// Напишите код, который будет спрашивать логин с помощью prompt.

// Если посетитель вводит «Админ», то prompt запрашивает пароль, если ничего не введено или нажата клавиша Esc – показать «Отменено», в противном случае отобразить «Я вас не знаю».

// Пароль проверять так:

//     Если введён пароль «Я главный», то выводить «Здравствуйте!»,
//     Иначе – «Неверный пароль»,
//     При отмене – «Отменено».

let userName = prompt("Кто там?", '');

if (userName === 'Админ') {

  let pass = prompt('Пароль?', '');

  if (pass === 'Я главный') {
    alert( 'Здравствуйте!' );
  } else if (pass === '' || pass === null) {
    alert( 'Отменено' );
  } else {
    alert( 'Неверный пароль' );
  }

} else if (userName === '' || userName === null) {
  alert( 'Отменено' );
} else {
  alert( "Я вас не знаю" );
}
